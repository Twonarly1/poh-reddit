// Copyright (c) 2020,2021,2022, StepZen, Inc.

const cors = require('cors')
const debug = require('debug')
const express = require('express')
const fs = require('fs')
const router = require('express-promise-router')()

const openBrowser = require('./utils/open-browser')

const _debugging = require('./api/debugging')
const details = require('./api/details')
const ping = require('./api/ping')
const _predicates = require('./api/predicates')
const proxy = require('./api/proxy')
const samples = require('./api/samples')

module.exports = async ({
  account,
  adminkey,
  apikey,
  cli = {version: ''},
  domain = 'stepzen.io',
  port = 5000,
  predicates = {
    available: false,
    enabled: false,
    onTogglePredicates: async () => {},
  },
  debugging = {
    enabled: false,
    onToggleDebugging: async () => {},
  },
  workspace,
}) => {
  const app = express()

  app.use(express.json())
  app.use(cors())

  app.use(express.static(`${__dirname}/../ui/build`))
  app.use((req, res, next) => {
    req.stepzen = {
      account,
      adminkey,
      apikey,
      cli,
      debugging,
      domain,
      predicates,
      workspace,
    }
    next()
  })

  router.all('/api/predicates', _predicates)
  router.all('/api/debugging', _debugging)
  router.get('/api/details', details)
  router.get('/api/ping', ping)
  router.get('/api/samples', samples)
  router.post('*', proxy)

  const dashboard = fs.readFileSync(
    `${__dirname}/../ui/build/index.html`,
    'utf8',
  )
  router.get('*', (req, res) => res.send(dashboard))

  // generic failsafe error handler
  // (to avoid printing 'unhandled promise rejection' errors to the console)
  router.use((err, req, res, next) => {
    debug('stepzen:dashboard')('router error', err)

    err.statusCode = err.statusCode || 500
    err.status = err.status || 'error'

    res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    })
  })

  app.use(router)

  const open = () =>
    openBrowser(`http://localhost:${port}/${workspace.endpoint}`)

  const start = async () =>
    new Promise(resolve => {
      let server = app.listen(port, () => {
        resolve(server)
      })
    })

  return {
    app,
    open,
    start,
  }
}
