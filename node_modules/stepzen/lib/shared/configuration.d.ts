import { LoggedInMachineConfiguration, LoggedOutMachineConfiguration, MachineConfiguration, StepZenCredentials } from './types';
/**
 * Gets the zenctl service URL template potentially containing an `{account}` token to
 * be replaced. Match order: environment variable `STEPZEN_SERVER_URL`,
 * passed configuration object, default.
 *
 * @param {*} config configuration object
 * @returns {*} configured or default zenctl server URL
 */
export declare const getZenCtlUrlTemplate: (config: {
    serviceInstance?: {
        zenctl?: string;
    };
}) => string;
/**
 * Gets the zenctl service URL (ready to use). Match order: environment variable
 * `STEPZEN_SERVER_URL`, passed configuration object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} configured or default zen server URL
 */
export declare const getZenCtlUrl: (config: LoggedInMachineConfiguration) => string;
/**
 * Adds the path component to the URL if the URL is missing one.
 *
 * @param {*} url the URL
 * @param {*} path path component
 * @returns {*} the updated URL
 */
export declare const appendPathnameIfEmpty: (url: string, path: string) => string;
/**
 * Gets the introspection service URL. Match order: environment variable
 * `STEPZEN_JSON2SDL_SERVER_URL`, passed configuration object, hardcoded
 * default.
 *
 * @param {*} config configuration object
 * @returns {*} configured or default zen server URL
 */
export declare const getIntrospectionUrl: (config: MachineConfiguration) => string;
/**
 * Gets the database introspection service URL. Match order: environment
 * variable `STEPZEN_DBINTROSPECTION_SERVER_URL`, passed configuration
 * object, hardcoded default.
 *
 * @param {*} config configuration object
 * @returns {*} configured or default zen server URL
 */
export declare const getDBIntrospectionUrl: (config: MachineConfiguration) => string;
/**
 * Ensure that the `stepzen-config.yaml` file exists and has valid content.
 * Cover 3 cases:
 *  - file does not exist (this is the first time the CLI is run)
 *      -> initialize the config file and add a UUID into it
 *  - file exists but does not include a UUID (it was created by an earlier
 *    version of the CLI)
 *       -> add a UUID into the existing config file
 *  - file exists, has stepzen credentials, but does not include an API key
 *    (it was created by an earlier version of the CLI)
 *       -> either fetch the API key from StepZen or remove logged in credentials
 *
 * @param {*} maybeConfiguration raw contents of the configuration file
 */
export declare const ensureValidConfiguration: (maybeConfiguration: Record<string, any> | null) => Promise<{
    configuration: MachineConfiguration;
    modified: boolean;
}>;
export declare const importConfiguration: (filepath: string) => Promise<Record<string, any>>;
export declare const readConfiguration: () => Promise<MachineConfiguration>;
export declare const writeConfiguration: (configuration: MachineConfiguration) => Promise<MachineConfiguration>;
export declare const writeCredentialsToConfigFile: (credentials: StepZenCredentials) => Promise<LoggedInMachineConfiguration>;
export declare const removeCredentialsFromConfigFile: () => Promise<LoggedOutMachineConfiguration>;
//# sourceMappingURL=configuration.d.ts.map