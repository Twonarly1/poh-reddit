"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseHeader = exports.HEADER_REGEX = void 0;
// Based on the definition of a `token` at
// https://datatracker.ietf.org/doc/html/rfc2616#page-17
exports.HEADER_REGEX = /^(?<name>[a-zA-Z0-9!#$%&'*+,-.^_`|~]+)\s*:(?<value>.*)$/;
/**
 * Parse a header string according to https://curl.se/docs/manpage.html#-H
 * and https://datatracker.ietf.org/doc/html/rfc2616#section-4.2
 *
 * @param {*} header a curl header string, e.g. `"api-key: asfdasdfad"`
 * @returns {*} a name/value record or
 *    `null` for the `Header:` notation that means "remove this header" in
 *    the cURL spec or a error object if cannot parse the string.
 */
const parseHeader = (header) => {
    const trimmed = header.trim();
    // Check if it's a `Header:` case
    if (trimmed.indexOf(':') === trimmed.length - 1) {
        // the user intent was to _remove_ this header
        return null;
    }
    // Check if it's a `Header;` case
    if (trimmed.indexOf(':') === -1 &&
        trimmed.indexOf(';') === trimmed.length - 1) {
        return {
            name: trimmed.substring(0, trimmed.length - 1).trim(),
            value: '',
        };
    }
    const match = trimmed.match(exports.HEADER_REGEX);
    if (!match || !match.groups || !match.groups.name || !match.groups.value) {
        return {
            error: `Unexpected header syntax in "${header}". ` +
                `Expected "[name]: [value]", "[name];" or "[name]:"`,
        };
    }
    return {
        name: match.groups.name,
        value: match.groups.value.trim(),
    };
};
exports.parseHeader = parseHeader;
//# sourceMappingURL=header.js.map