"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
exports.graphql2sdl = exports.askGraphQLQuestions = void 0;
const inquirer = require("inquirer");
const header_1 = require("../shared/header");
const helpers_1 = require("./helpers");
const configuration_1 = require("../shared/configuration");
const askGraphQLQuestions = async (defaultAnswers = {}) => {
    const questions = [
        {
            name: 'endpoint',
            message: 'What is the GraphQL endpoint URL?',
            validate: input => input.trim() !== '',
        },
        {
            name: 'typePrefix',
            message: 'Prefix to add to all generated type names (leave blank for none)',
        },
        {
            name: 'includeRootOperations',
            type: 'confirm',
            message: 'Should type prefix be added to query and mutation fields as well?',
            when: answers => Boolean(answers.typePrefix),
        },
        {
            name: 'header',
            type: 'input',
            message: 'Add an HTTP header, e.g. Header-Name: header value (leave blank for none)',
            validate: input => input === '' || header_1.HEADER_REGEX.test(input.trim()) || 'invalid header',
        },
    ];
    const answers = await inquirer.prompt((0, helpers_1.overrideDefaults)(questions, defaultAnswers));
    const header = (0, header_1.parseHeader)(answers.header);
    return {
        endpoint: answers.endpoint,
        typePrefix: answers.typePrefix.trim() === '' ? undefined : answers.typePrefix.trim(),
        includeRootOperations: answers.includeRootOperations,
        headers: header && !('error' in header) ? [header] : [],
    };
};
exports.askGraphQLQuestions = askGraphQLQuestions;
const graphql2sdl = async ({ name, source, endpoint, typePrefix, includeRootOperations, headers, onConflict, }, configuration) => {
    const response = await (0, helpers_1.queryIntrospectionService)((0, configuration_1.getIntrospectionUrl)(configuration), {
        operation: 'getSDLFromGraphQL',
        variables: {
            endpoint: {
                type: 'String!',
                value: endpoint,
            },
            typePrefix: {
                type: 'String',
                value: typePrefix || null,
            },
            includeRootOperations: {
                type: 'Boolean',
                value: includeRootOperations || null,
            },
            headers: {
                type: '[HeaderInput!]',
                value: headers && headers.length > 0 ? headers : null,
            },
        },
    });
    if (response.error) {
        return { error: response.error };
    }
    return (0, helpers_1.writeSdlAndConfig)({
        name: name || 'graphql',
        source,
        onConflict,
        response,
    });
};
exports.graphql2sdl = graphql2sdl;
//# sourceMappingURL=graphql2sdl.js.map