import * as inquirer from 'inquirer';
import type { Answers, DistinctQuestion } from 'inquirer';
export declare const createGeneratorFiles: (id: string, details: any) => Promise<string>;
export declare type GeneratorConfiguration = {
    questions: DistinctQuestion<Answers>[];
    answers: Answers;
    errors: Record<string, any>;
    status: number;
};
export declare const getConfiguration: (id: string, details?: any) => Promise<GeneratorConfiguration | null>;
export declare const getSchema: (arg: string) => string;
export declare const getTemplates: () => Promise<string>;
export declare const askGeneratorQuestions: (id: string, settings: any, state: any) => Promise<any>;
export declare const askTemplateQuestions: (id: string, settings: any, state: any) => Promise<any>;
export declare type IntrospectionServiceQuery = {
    operation: string;
    variables: {
        [id: string]: {
            type: string;
            value: any | null;
        };
    };
};
export declare type IntrospectionServiceResponse = {
    sdl?: string;
    config?: string;
    error?: string;
};
export declare const queryIntrospectionService: (serverUrl: string, query: IntrospectionServiceQuery) => Promise<IntrospectionServiceResponse>;
export declare const writeSdlAndConfig: ({ name, source, mergeTypes, onConflict, response, }: {
    name: string;
    source: string;
    mergeTypes?: boolean | undefined;
    onConflict: 'overwrite' | 'append';
    response: IntrospectionServiceResponse;
}) => Promise<{
    outPath: string;
}>;
export declare const overrideDefaults: <Options>(questions: inquirer.DistinctQuestion<Options>[], defaultAnswers: Partial<Options>) => inquirer.DistinctQuestion<Options>[];
//# sourceMappingURL=helpers.d.ts.map