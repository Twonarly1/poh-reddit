import { HeaderInput } from '../shared/header';
import type { CommonImportOptions } from '.';
import type { MachineConfiguration } from '../shared/types';
export declare type GraphQL2SdlOptions = CommonImportOptions & {
    endpoint: string;
    typePrefix?: string;
    includeRootOperations?: boolean;
    headers: readonly HeaderInput[];
};
export declare type InteractiveGraphQL2SdlOptions = Pick<GraphQL2SdlOptions, 'endpoint' | 'typePrefix' | 'includeRootOperations' | 'headers'>;
export declare type GraphQLAnswers = {
    endpoint: string;
    typePrefix: string;
    includeRootOperations: boolean;
    header: string;
};
export declare const askGraphQLQuestions: (defaultAnswers?: Partial<GraphQLAnswers>) => Promise<InteractiveGraphQL2SdlOptions>;
export declare const graphql2sdl: ({ name, source, endpoint, typePrefix, includeRootOperations, headers, onConflict, }: GraphQL2SdlOptions, configuration: MachineConfiguration) => Promise<{
    error: string;
} | {
    outPath: string;
}>;
//# sourceMappingURL=graphql2sdl.d.ts.map