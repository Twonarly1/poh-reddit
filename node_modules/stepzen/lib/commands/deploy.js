"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
// This file contains the code for the `stepzen deploy` command.
const chalk = require("chalk");
const fs = require("fs");
const path = require("path");
const prettyMilliseconds = require("pretty-ms");
const command_1 = require("@oclif/command");
const core_1 = require("@oclif/core");
const errors_1 = require("@oclif/errors");
const upload_1 = require("./upload");
const actions_1 = require("../shared/actions");
const utils_1 = require("../shared/utils");
const zen_command_1 = require("../shared/zen-command");
const constants_1 = require("../shared/constants");
class Deploy extends zen_command_1.default {
    // eslint-disable-next-line complexity
    async run() {
        const { args, flags } = this.parse(Deploy);
        // validate the endpoint arg
        if (args.endpoint) {
            const maybeError = (0, utils_1.validateEndpoint)(args.endpoint);
            if (typeof maybeError === 'string') {
                throw new errors_1.CLIError(maybeError);
            }
        }
        const hasDeprecatedFlags = flags.schema || flags.configurationsets;
        // Print a deprecation warning (if necessary)
        if (hasDeprecatedFlags &&
            (0, utils_1.getFeatureFlag)(constants_1.DEPRECATE_ZENCTL1) &&
            !flags.silent) {
            const messages = ['schema', 'configurationsets']
                .map(flag => {
                if (flags[flag]) {
                    return chalk `{yellow the {bold ${flag}} flag is deprecated and will be removed in future versions}`;
                }
                return '';
            })
                .filter(Boolean);
            messages[messages.length - 1] += chalk `\n\tSee more help with --help`;
            messages.forEach(message => this.warn(message));
            this.log();
        }
        // Enforce the "required" flag on `schema` for the deprecated code path
        // (this was done by oclif when `schema` was marked as `required`)
        if (hasDeprecatedFlags && !flags.schema) {
            throw new errors_1.CLIError(chalk `When using {bold --configurationsets}, the {bold --schema} flag is required:` +
                chalk `\n\t--schema SCHEMA  {dim name of a schema uploaded earlier with {bold stepzen upload}}` +
                chalk `\n\tSee more help with --help`);
        }
        // Enforce the "required" flag on `endpoint` for the deprecated code path
        // (this was done by oclif when `endpoint` arg was marked as `required`)
        if (hasDeprecatedFlags && !args.endpoint) {
            throw new errors_1.CLIError(chalk `When using {bold --schema}, the {bold endpoint} argument is required:` +
                chalk `\n\tendpoint  {dim name of the endpoint (e.g. {bold api/customers})}` +
                chalk `\n\tSee more help with --help`);
        }
        const { configuration } = await this.ensureStepZenAccount();
        const deployStart = new Date().getTime();
        let endpoint;
        let schema;
        let configurationsets;
        if (hasDeprecatedFlags) {
            endpoint = args.endpoint;
            schema = flags.schema;
            configurationsets = flags.configurationsets;
            if (!flags.silent) {
                core_1.CliUx.ux.action.start(`Deploying ${chalk.yellow(endpoint)} to StepZen`);
            }
        }
        else {
            const workspace = await this.ensureStepZenWorkspace({
                directory: flags.dir,
                failIfMissing: true,
                silent: flags.silent,
            });
            endpoint = args.endpoint || workspace.endpoint;
            if (!flags.silent) {
                core_1.CliUx.ux.action.start(`Deploying ${chalk.yellow(endpoint)} to StepZen`);
            }
            const configPath = path.join(workspace.schema, 'config.yaml');
            if (fs.existsSync(configPath) && fs.statSync(configPath).size > 0) {
                await upload_1.default.run([
                    'configurationset',
                    endpoint,
                    '--file',
                    configPath,
                    '--silent',
                ]);
                configurationsets = `${endpoint},stepzen/default`;
            }
            else {
                configurationsets = `stepzen/default`;
            }
            await upload_1.default.run([
                'schema',
                endpoint,
                '--dir',
                workspace.schema,
                '--silent',
            ]);
            schema = endpoint;
        }
        // If this is a public account, add a special configuration set to make the
        // endpoint public (https://github.com/steprz/zen/pull/5701)
        if (configuration.account.startsWith('public')) {
            configurationsets = configurationsets
                ? `${configurationsets},stepzen/public`
                : 'stepzen/public';
        }
        const response = await (0, actions_1.deploy)(endpoint, configurationsets, schema);
        if (response.success) {
            if (!flags.silent) {
                const deployEnd = new Date().getTime();
                const deployTime = deployEnd - deployStart;
                core_1.CliUx.ux.action.stop(`${chalk.grey('done in')} ${prettyMilliseconds(deployTime)} ðŸš€`);
                console.log((0, utils_1.formatEndpointInfo)({ account: configuration.account, endpoint }));
            }
        }
        else {
            if (!flags.silent) {
                core_1.CliUx.ux.action.stop('fail');
            }
            // Errors. Exit, and output the server's error response
            throw new errors_1.CLIError(JSON.stringify(response.errors) || 'An error occurred.');
        }
    }
}
exports.default = Deploy;
Deploy.description = 'deploy to stepzen';
Deploy.usage = `deploy [ENDPOINT] [--config=path/to/config.yaml] [--dir=path/to/workspace]

-- OR ${(0, utils_1.getFeatureFlag)(constants_1.DEPRECATE_ZENCTL1) ? '(deprecated) ' : ''}--

$ stepzen deploy ENDPOINT --schema=schema [--configurationsets=cs1[,cs2[,..]]]`;
Deploy.flags = Object.assign(Object.assign({}, zen_command_1.default.flags), { help: command_1.flags.help({ char: 'h' }), dir: command_1.flags.string({ description: 'working directory' }), silent: command_1.flags.boolean(), 
    // configurationsets is assumed to be a comma separated string naming uploaded configurationsets
    // a special configuration 'stepzen/defaults' is recognized.
    configurationsets: command_1.flags.string({
        description: chalk `
        name(s) of configuration sets uploaded earlier with {bold stepzen upload}` +
            ((0, utils_1.getFeatureFlag)(constants_1.DEPRECATE_ZENCTL1)
                ? chalk `
        {yellow [DEPRECATED: this flag will be removed in future versions]}
        
        Instead, please use one of these options:
        - {bold stepzen deploy} (without the {bold --configurationsets} flag)
        \tto use the configuration from the {bold config.yaml} file in the current directory (if exists)
        - {bold stepzen deploy --config path/to/config.yaml}
        \tto explicitly specify the configuration file`
                : ''),
        exclusive: ['config', 'dir'],
    }), config: command_1.flags.string({
        helpValue: 'path/to/config.yaml',
        default: 'config.yaml',
        description: 'configuration file to use (relative to the current directory)',
    }), schema: command_1.flags.string({
        description: chalk `
        name of a schema uploaded earlier with {bold stepzen upload}` +
            ((0, utils_1.getFeatureFlag)(constants_1.DEPRECATE_ZENCTL1)
                ? chalk `
        {yellow [DEPRECATED: this flag will be removed in future versions]}
        
        Instead, please use one of these options:
         - {bold stepzen deploy} (without the {bold --schema} flag)
        \tto deploy the schema from a StepZen workspace in your current directory
         - {bold stepzen deploy --dir path/to/workspace}
        \tto deploy from a StepZen workspace in another folder`
                : ''),
        exclusive: ['config', 'dir'],
    }) });
Deploy.args = [
    {
        name: 'endpoint',
        description: chalk `name of the endpoint (e.g. {bold api/customers})
        [default: use the {underline endpoint} property from stepzen.config.json]`,
        required: false,
    },
];
//# sourceMappingURL=deploy.js.map