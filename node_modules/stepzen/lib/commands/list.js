"use strict";
// Copyright (c) 2020,2021,2022, StepZen, Inc.
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const command_1 = require("@oclif/command");
const errors_1 = require("@oclif/errors");
const actions_1 = require("../shared/actions");
const constants_1 = require("../shared/constants");
const utils_1 = require("../shared/utils");
const zen_command_1 = require("../shared/zen-command");
class List extends zen_command_1.default {
    async run() {
        var _a;
        const { args } = this.parse(List);
        await this.ensureStepZenAccount();
        if ((0, utils_1.getFeatureFlag)(constants_1.DEPRECATE_ZENCTL1)) {
            if (args.type !== 'endpoints') {
                this.warn(chalk `{yellow the type {bold ${args.type}} is deprecated and will be removed in future versions}` +
                    chalk `\n\tSee more help with --help`);
            }
        }
        const response = await (0, actions_1.list)(args.type);
        if (response.success) {
            if (((_a = response.results) === null || _a === void 0 ? void 0 : _a.length) === 0) {
                // Success, but no results
                this.log('No results.');
            }
            else {
                // Success. The server returns a list of results.
                this.log(`${JSON.stringify(response.results, null, '  ')}`);
            }
        }
        else {
            // Error. Exit, and output the server's error response
            throw new errors_1.CLIError(JSON.stringify(response.errors) || 'An error occurred.');
        }
    }
}
exports.default = List;
List.description = 'list endpoints, schemas and configuration sets in your StepZen account';
List.flags = Object.assign(Object.assign({}, zen_command_1.default.flags), { help: command_1.flags.help({ char: 'h' }) });
List.args = [
    {
        name: 'type',
        default: 'endpoints',
        description: chalk `
        
        The type of entities to list:
        \t{bold endpoints} - GraphQL API endpoints deployed with {underline stepzen deploy} or {underline stepzen start}
        \t{bold schemas} ${(0, utils_1.getFeatureFlag)(constants_1.DEPRECATE_ZENCTL1) ? chalk `{yellow [DEPRECATED]} ` : ''}- StepZen schemas uploaded with {underline stepzen upload} (or {underline stepzen start})
        \t{bold configurationsets} ${(0, utils_1.getFeatureFlag)(constants_1.DEPRECATE_ZENCTL1) ? chalk `{yellow [DEPRECATED]} ` : ''}- StepZen configuration sets uploaded with {underline stepzen upload} (or {underline stepzen start})`,
        options: ['endpoints', 'configurationsets', 'schemas'],
    },
];
//# sourceMappingURL=list.js.map