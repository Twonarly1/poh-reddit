import { flags } from '@oclif/command';
import { Input } from '@oclif/parser';
import type { CommonImportOptions } from '../generate';
import ZenCommand from '../shared/zen-command';
import { HeaderInput } from '../shared/header';
import { Workspace } from '../shared/types';
declare type Flags<Command> = Command extends Input<infer F> ? F : never;
export default class Import extends ZenCommand {
    static description: string;
    static commonIntrospectionFlags: {
        prefix: flags.IOptionFlag<string | undefined>;
        header: flags.IOptionFlag<string[]>;
        'header-param': flags.IOptionFlag<string[]>;
    };
    static curlFlags: {
        'query-name': flags.IOptionFlag<string | undefined>;
        'query-type': flags.IOptionFlag<string | undefined>;
        'path-params': flags.IOptionFlag<string | undefined>;
    };
    static sqlFlags: {
        'db-host': flags.IOptionFlag<string | undefined>;
        'db-user': flags.IOptionFlag<string | undefined>;
        'db-password': flags.IOptionFlag<string | undefined>;
        'db-database': flags.IOptionFlag<string | undefined>;
        'db-link-types': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'db-include': flags.IOptionFlag<string>;
    };
    static postgresqlFlags: {
        'db-schema': flags.IOptionFlag<string | undefined>;
    };
    static flagsForSchemas: ({
        flags: {
            prefix: flags.IOptionFlag<string | undefined>;
            header: flags.IOptionFlag<string[]>;
            'header-param': flags.IOptionFlag<string[]>;
        };
        schemas: string[];
    } | {
        flags: {
            'query-name': flags.IOptionFlag<string | undefined>;
            'query-type': flags.IOptionFlag<string | undefined>;
            'path-params': flags.IOptionFlag<string | undefined>;
        };
        schemas: string[];
    } | {
        flags: {
            'db-host': flags.IOptionFlag<string | undefined>;
            'db-user': flags.IOptionFlag<string | undefined>;
            'db-password': flags.IOptionFlag<string | undefined>;
            'db-database': flags.IOptionFlag<string | undefined>;
            'db-link-types': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
            'db-include': flags.IOptionFlag<string>;
        };
        schemas: string[];
    } | {
        flags: {
            'db-schema': flags.IOptionFlag<string | undefined>;
        };
        schemas: string[];
    })[];
    static flags: {
        'db-schema': flags.IOptionFlag<string | undefined>;
        'db-host': flags.IOptionFlag<string | undefined>;
        'db-user': flags.IOptionFlag<string | undefined>;
        'db-password': flags.IOptionFlag<string | undefined>;
        'db-database': flags.IOptionFlag<string | undefined>;
        'db-link-types': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'db-include': flags.IOptionFlag<string>;
        'query-name': flags.IOptionFlag<string | undefined>;
        'query-type': flags.IOptionFlag<string | undefined>;
        'path-params': flags.IOptionFlag<string | undefined>;
        prefix: flags.IOptionFlag<string | undefined>;
        header: flags.IOptionFlag<string[]>;
        'header-param': flags.IOptionFlag<string[]>;
        dir: flags.IOptionFlag<string | undefined>;
        help: import("@oclif/parser/lib/flags").IBooleanFlag<void>;
        silent: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        name: flags.IOptionFlag<string | undefined>;
        overwrite: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
        'non-interactive': import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    static args: {
        name: string;
        required: boolean;
    }[];
    static strict: boolean;
    run(): Promise<void>;
    importCurl(argv: string[], flags: Flags<typeof Import>, commonOptions: CommonImportOptions): Promise<string>;
    importGraphQL(argv: string[], flags: Flags<typeof Import>, commonOptions: CommonImportOptions): Promise<string>;
    importSql(schema: 'mysql' | 'postgresql', flags: Flags<typeof Import>, fixedOptions: CommonImportOptions): Promise<string>;
    importFromGeneratorEngines(schema: string, flags: any, fixedOptions: CommonImportOptions): Promise<string>;
    ensureOnConflictBehavior(workspace: Workspace, schema: string, flags: ReturnType<Import['parseWorkaround']>['flags']): Promise<"overwrite" | "append">;
    warnAboutIgnoredFlags(schema: string, usedFlags: {
        [key: string]: any;
    }): void;
    parseWorkaround(): import("@oclif/parser").Output<{
        'db-schema': string | undefined;
        'db-host': string | undefined;
        'db-user': string | undefined;
        'db-password': string | undefined;
        'db-database': string | undefined;
        'db-link-types': boolean;
        'db-include': string;
        'query-name': string | undefined;
        'query-type': string | undefined;
        'path-params': string | undefined;
        prefix: string | undefined;
        header: string[];
        'header-param': string[];
        dir: string | undefined;
        help: void;
        silent: boolean;
        name: string | undefined;
        overwrite: boolean;
        'non-interactive': boolean;
    }, {
        [name: string]: any;
    }>;
    parseHeaderFlags(headerFlagValues?: string[], headerParamFlagValues?: string[]): HeaderInput[];
    getSqlOptionsFromFlags(flags: Flags<typeof Import>): {
        host: string | undefined;
        user: string | undefined;
        password: string | undefined;
        database: string | undefined;
        linkTypes: boolean;
        schema: string | undefined;
        include: "tables-only" | "views-only" | "tables-and-views" | undefined;
    };
}
export {};
//# sourceMappingURL=import.d.ts.map